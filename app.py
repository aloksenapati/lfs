{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd  \n",
    "import numpy as np\n",
    "from flask import Flask, request, jsonify, render_template\n",
    "import pickle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * Serving Flask app \"__main__\" (lazy loading)\n",
      " * Environment: production\n",
      "   WARNING: Do not use the development server in a production environment.\n",
      "   Use a production WSGI server instead.\n",
      " * Debug mode: off\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n",
      "127.0.0.1 - - [26/Apr/2020 16:10:23] \"GET / HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [26/Apr/2020 16:10:24] \"GET /favicon.ico HTTP/1.1\" 404 -\n",
      "127.0.0.1 - - [26/Apr/2020 16:10:59] \"POST / HTTP/1.1\" 200 -\n"
     ]
    }
   ],
   "source": [
    "app = Flask(__name__)\n",
    "data= pickle.load(open('data_pickle.pkl', 'rb'))\n",
    "\n",
    "@app.route('/')\n",
    "def home():\n",
    "    return render_template('index.html')\n",
    "\n",
    "@app.route('/predict',methods=['POST'])\n",
    "def predict():\n",
    "     #qustine no : 1\n",
    "    def qes1(op1,op2,op3): #for query type 'discounted_products_list'  this function is written\n",
    "        if op1=='discount':\n",
    "            if op2=='>':   #return the id which are discounting as per given condition\n",
    "                try:\n",
    "                    z=list(pd.DataFrame(list(data[data['discount%']>float(op3)]['_id']))['$oid'])\n",
    "                    return z\n",
    "                except:\n",
    "                    z=['invalid input op3']\n",
    "                    return z\n",
    "            elif op2=='<':\n",
    "                try:\n",
    "                    z=list(pd.DataFrame(list(data[data['discount%']<float(op3)]['_id']))['$oid'])\n",
    "                    return z\n",
    "                except:\n",
    "                    z=['invalid input op3']\n",
    "                    return z\n",
    "            elif op2=='==':\n",
    "                try:\n",
    "                    z=list(pd.DataFrame(list(data[data['discount%']==float(op3)]['_id']))['$oid'])\n",
    "                    return z\n",
    "                except:\n",
    "                    z=['invalid input op3']\n",
    "                    return z\n",
    "            else:\n",
    "                z=['invalid input op2']\n",
    "                return z\n",
    "        elif op1=='brand.name': #return the id's of given codition brand\n",
    "            if op2 in ['>','<']:\n",
    "                z=['invalid input op2']\n",
    "                return z\n",
    "            elif op2=='==':\n",
    "                try:\n",
    "                    z=list(pd.DataFrame(list(data[data['brand'].map(lambda x:x['name']==op3)]['_id']))['$oid'])\n",
    "                    return z\n",
    "                except:\n",
    "                    z=['invalid input op3']\n",
    "                    return z\n",
    "            \n",
    "            else:\n",
    "                z=['invalid input op2']\n",
    "                return z\n",
    "        else:\n",
    "            z=['invalid input op1']\n",
    "            return z\n",
    "            \n",
    "            \n",
    "            \n",
    "   #question : 2\n",
    "    def qes2(op1,op2,op3): #this function is written for 'discounted_products_count' & 'avg_discount' return in dict format\n",
    "        d={}\n",
    "        if op1=='discount': #for operand1 type 1 thses are the test case\n",
    "            if op2=='>':\n",
    "                d['discounted_products_count']=len(data[data['discount%']>float(op3)])\n",
    "                d['avg_dicount']=data[data['discount%']>float(op3)]['discount%'].sum()/len(data[data['discount%']>float(op3)])\n",
    "                z=d\n",
    "                return z\n",
    "            elif op2=='<':\n",
    "                d['discounted_products_count']=len(data[data['discount%']>float(op3)])\n",
    "                d['avg_dicount']=data[data['discount%']<float(op3)]['discount%'].sum()/len(data[data['discount%']>float(op3)])\n",
    "                z=d\n",
    "                return z\n",
    "            elif op2=='==':\n",
    "                d['discounted_products_count']=len(data[data['discount%']>float(op3)])\n",
    "                d['avg_dicount']=data[data['discount%']==float(op3)]['discount%'].sum()/len(data[data['discount%']>float(op3)])\n",
    "                z=d\n",
    "                return z\n",
    "            else:\n",
    "                z=['invalid input op2']\n",
    "                return z\n",
    "        elif op1=='brand.name': #for operand1 type 2 thses are the test case\n",
    "            if op2 in ['>','<']:\n",
    "                z=['invalid input op2']\n",
    "                return z\n",
    "                    \n",
    "            elif op3 in list(set(pd.DataFrame(list(data['brand']))['name'])):\n",
    "                df=pd.DataFrame(data[data['brand'].map(lambda x:x['name']==op3)]['discount%'])\n",
    "                d['discounted_products_count']=len(df)\n",
    "                d['avg_dicount']=df.sum()/len(df)\n",
    "                z=d\n",
    "                return z\n",
    "            else:\n",
    "                z=['invalid input op3']\n",
    "                return z\n",
    "        else:\n",
    "            z=['invalid input']\n",
    "            return z\n",
    "        \n",
    "    \n",
    "#question : 3\n",
    "    def qes3(op1,op2,op3): #this function for 'expensive_list' return id's\n",
    "        if op1=='brand.name':\n",
    "            if op2=='==':\n",
    "                if op3 in list(set(pd.DataFrame(list(data['brand']))['name'])):\n",
    "                    ls=[]\n",
    "                    for i in range(len(data)):\n",
    "                        if data['brand'][i]['name']==op3:\n",
    "                            if data['price_positioning_text'][i]=='expensive':\n",
    "                                ls.append(data.iloc[i]['_id']['$oid'])\n",
    "                    z=ls\n",
    "                    return z\n",
    "                else:\n",
    "                    z=['invalid input op3']\n",
    "                    return z\n",
    "            else:\n",
    "                z=['invalid input op2']\n",
    "                return z\n",
    "        else:\n",
    "            z=['invalid input op1']\n",
    "            return z\n",
    "    \n",
    "    \n",
    "#question no : 4\n",
    "    def qes4(op1,op2,op3): #this function written for 'competition_discount_diff_list' & return id's\n",
    "        if op1=='discount_diff': #type 1 case study\n",
    "            ls3=[]\n",
    "            for i in range(len(data)):\n",
    "                for j in range(4):\n",
    "                    n=pd.DataFrame(pd.DataFrame(data['similar_products'][i]['website_results']).iloc[1,:][j]).iloc[0][0]\n",
    "                    if n!=0:\n",
    "                        lt=pd.DataFrame(pd.DataFrame(data['similar_products'][i]['website_results']).iloc[1,:][j]).iloc[0][3]\n",
    "                        x=pd.DataFrame(data.iloc[:,10][i])\n",
    "                        bp=x.basket_price[1]\n",
    "                        dd=(bp-lt)*100/bp\n",
    "                        if op2=='>':\n",
    "                            if dd>float(op3):\n",
    "                                ls3.append(data.iloc[i]['_id']['$oid'])\n",
    "                                \n",
    "                        elif op2=='<':\n",
    "                            if dd<float(op3):\n",
    "                                ls3.append(data.iloc[i]['_id']['$oid'])\n",
    "                        elif op2=='==':\n",
    "                             if dd==float(op3):\n",
    "                                ls3.append(data.iloc[i]['_id']['$oid'])\n",
    "                        else:\n",
    "                            return 'invalid op2 input'\n",
    "            z=ls3\n",
    "            return z\n",
    "        elif op1=='competition': #type 2 case study\n",
    "            if op2=='==':\n",
    "                ls2=[]\n",
    "                for i in range(len(data)):\n",
    "                    n=pd.DataFrame(data['similar_products'][i]['website_results']).iloc[1,:][op3]['total_results']\n",
    "                    if n!=0:\n",
    "                        ls2.append(data.iloc[i]['_id']['$oid'])\n",
    "                z=ls2\n",
    "                return z\n",
    "            else:\n",
    "                z=['invalid input op2']\n",
    "                return z\n",
    "        \n",
    "\n",
    "        else:\n",
    "            z=['invalid input op1']\n",
    "            return z\n",
    "    \n",
    "    int_features = [k for k in request.form.values()]\n",
    "    query = int_features[0]\n",
    "    op1 = int_features[1]\n",
    "    op2 = int_features[2]\n",
    "    op3 = int_features[3]\n",
    "    if query=='discounted_products_list':\n",
    "        pred=qes1(op1,op2,op3)\n",
    "    elif query in ['discounted_products_count','avg_discount']:\n",
    "        pred=qes2(op1,op2,op3)\n",
    "    elif query=='expensive_list':\n",
    "        pred=qes3(op1,op2,op3)\n",
    "    elif query=='competition_discount_diff_list':\n",
    "        pred=qes4(op1,op2,op3)       \n",
    "\n",
    "    return render_template('index.html', prediction_text=pred)\n",
    "    \n",
    "    #For rendering results on HTML GUI\n",
    "    \n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    app.run(debug=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
